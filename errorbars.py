# errorbars.py

import numpy as np
import matplotlib.pyplot as plt

deterministic = [
np.array([0.37665194562, 0.424321605969, 0.337613585932, 0.408796787891, 0.677103536454]), # 0.0
np.array([0.39926086737, 0.498303296662, 0.464201516311, 0.417905945946, 0.432303882151]), # 0.1
np.array([0.553814673401, 0.566984866569, 0.562218272346, 0.496900526976, 0.544083285131]), # 0.3
np.array([0.6281299066, 0.5958891526, 0.55009125209, 0.450671695385, 0.399248349421]), # 0.5
np.array([0.62230202529, 0.569115953631, 0.667710518366, 0.568010390291, 0.56754574701]), # 0.7
np.array([0.576714297195, 0.579516830027, 0.619724175097, 0.587257393289, 0.494548729882]), # 0.9
np.array([0.548818724189, 0.575167488027, 0.509744315087, 0.429611701255, 0.326181736231]) # 1.0
]

stochastic = [
np.array([0.364800970507, 0.244374215362, 0.405803047267, 0.436283204871, 0.310448878427]), # 0.0
np.array([0.422473300098, 0.399921218621, 0.454449444399, 0.395794842015, 0.383630439936]), # 0.1
np.array([0.459002481401, 0.411768411022, 0.498453325661, 0.344930635889, 0.52115535562]), # 0.3
np.array([0.489245103067, 0.457988042698, 0.597266831212, 0.377608517852, 0.406358281795]), # 0.5
np.array([0.595790748374, 0.413901674975, 0.486471248162, 0.491996342887, 0.495803185373]), # 0.7
np.array([0.377092635199, 0.447352586454, 0.441280380785, 0.412311616111, 0.552959660119]), # 0.9
np.array([0.41890777442, 0.488583912665, 0.445952838393, 0.37243180603, 0.385764500833]) # 1.0
]

dynaq_vs_qlearning = [
np.array([0.543093082049, 0.443965763462, 0.552179626694 ,0.595739174021, 0.526828972443]),
np.array([0.471713983681, 0.371861980372, 0.374837533614, 0.526888660465, 0.361034143194])
]

dynaq = [
np.array([0.84163000805, -0.801542832371, -0.427274557935, -0.290046208867, -0.427605368901]), # 5
np.array([0.832884713023, 1.19059989572, 1.74015314508, 1.53239606195, -1.28716406829]), # 10
np.array([-1.25494994678, 0.479695849834, -0.741368170039, -0.522482296037, -1.42469220776]), # 15
np.array([1.15055756698, 0.620103172166, -1.32417339698, -0.169263306652, -0.291949675086]), # 20
np.array([-0.886966681778, 0.923794790077, -0.094187261723, -1.31899786687, -0.753774472813]), # 25
np.array([1.42190355435, 0.735487667315, 1.24082513348, 1.06054019504, 0.640651931758]), # 30
np.array([-2.32750572201, 0.372597712854, 0.400835174051, 0.336834723682, -1.25989151435]), # 35
np.array([-0.75122511568, -0.477955378289, -0.507287801924, 0.0436863369305, -1.88230833043]), # 40
np.array([-0.447760452097, -2.15822190703, -0.406231991079, 0.814302470414, -1.65154259663]), # 45
np.array([0.364404292194, 0.655638768834, 0.0451589241795, -0.0737164839439, -1.06554514479]) # 50
]

def plot(samples, x_names, title, filename): 

    avg = []
    std = []
    for i in range(len(samples)):
        avg.append(np.mean(samples[i]))
        std.append(np.std(samples[i]))
        
    x_pos = np.arange(len(x_names))

    # Build the plot
    fig, ax = plt.subplots()
    ax.bar(x_pos, avg, yerr=std, align='center', alpha=0.5, ecolor='black', capsize=10)
    ax.set_ylabel("Average returns from start state")
    ax.set_xticks(x_pos)
    ax.set_xticklabels(x_names)
    ax.set_title(title)
    ax.yaxis.grid(True)

    # Save the figure and show
    plt.tight_layout()
    plt.savefig('%s.png' % filename)
    plt.show()

if __name__ == '__main__':
    #plot(deterministic, "lambdas_deterministic")
    #plot(stochastic, "lambdas_stochastic")
    #plot(dynaq_vs_qlearning, "dyna-vs-ql")
    plot(dynaq, "dynas-discount-grid")